public class CustomList {
    class Node {
        int val;
        Node next;
        Node(int val) {
            this.val = val;
        }
    }
    Node head;
    public void addFront(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;
    }
    public void addEnd(int val) {
        Node node = new Node(val);
        if (head == null) {
            head = node;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next; 
        }
        current.next = node;
    }
    public void addIndex(int index, int val) {
        Node node = new Node(val);
        if (head == null) {
            head = node;
            return;
        }
        Node current = head;
        int startIndex = 0;
        while (current.next != null && startIndex < index-1) {
            current = current.next; 
            startIndex++;
        }
        node.next = current.next;
        current.next = node;
    }
    public void removeFront() {
        if (head == null) {
            return;
        }
        head = head.next;
        //automatically discards reference to old head node
    }
    public void removeEnd() {
        if (head == null) {
            return;
        }
        Node current = head;
        while (current.next.next != null) {
            current = current.next; 
        }
        current.next = null;
    }
    public void removeIndex(int index) {
        if (head == null) {
            return;
        }
        Node current = head;
        int startIndex = 0;
        while (current.next != null && startIndex < index-1) {
            current = current.next;
            startIndex++;
        }
        current.next = current.next.next;
    }
    public int find(int val) {
        Node current = head;
        int index = 0;
        while (current != null && current.val != val) {
            current = current.next;
            index++;
        }
        return index;
    }
    public void print() {
        Node current = head;
        while (current != null) {
            System.out.println(current.val);
            current = current.next;
        }
    }
    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }
    //while current != null means we go through all the nodes, including the last node
    //while current.next != null means we stop at the last node
    //while current.next.next != null means we stop at the 2nd to last node
    public static void main(String args[]) {
        CustomList list = new CustomList();
        list.addFront(5);
        list.addFront(4);
        list.addEnd(6);
        list.addIndex(2, 2);
        //the below doesn't change the list
        list.addFront(4);
        list.removeFront();
        list.addEnd(4);
        list.removeEnd();
        list.addIndex(2, 3);
        list.removeIndex(2);
        list.print();
        
        System.out.println("new list");
        CustomList list2 = new CustomList();
        list2.addEnd(2);
        list2.addFront(3);
        list2.print();

        System.out.println("new list");
        CustomList list3 = new CustomList();
        list3.addIndex(0, 2);
        list3.addFront(3);
        list3.print();
        
        System.out.println("new list");
        CustomList list4 = new CustomList();
        list4.removeFront();
        list4.removeEnd();
        list4.print();
        
        System.out.println("new list");
        CustomList list5 = list;
        list5.reverse();
        list5.print();
        System.out.println("index = " + list5.find(6));
        System.out.println("index = " + list5.find(2));
        System.out.println("index = " + list5.find(5));
        System.out.println("index = " + list5.find(4));
    }
}
//https://java2blog.com/implement-singly-linked-list-in-java/
//https://www.techiedelight.com/linked-list-implementation-java/